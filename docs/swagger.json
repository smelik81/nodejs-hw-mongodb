{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "Contacts app",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "description": "This is a documentation of my Contacts app"
  },
  "servers": [
    {
      "url": "http://localhost:3000"
    },
    {
      "url": "https://nodejs-hw-mongodb-gd0p.onrender.com"
    }
  ],
  "tags": [
    {
      "name": "Contacts",
      "description": "Operations about create users, delete users, update users."
    },
    {
      "name": "Auth",
      "description": "Auth operations."
    }
  ],
  "paths": {
    "/contacts": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Get list of all contacts",
        "operationId": "getContacts",
        "description": "Get list of users with this endpoint",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "example": 1
          },
          {
            "in": "query",
            "name": "perPage",
            "schema": {
              "type": "integer"
            },
            "example": 10
          },
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string",
              "example": "name"
            },
            "description": "All contacts fields can be mentioned. Default value - _id"
          },
          {
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "example": "asc"
            }
          },
          {
            "in": "query",
            "name": "contactType",
            "schema": {
              "type": "string",
              "enum": [
                "work",
                "home",
                "personal"
              ]
            },
            "description": "Filter contacts by type",
            "example": "personal"
          },
          {
            "in": "query",
            "name": "isFavourite",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false"
              ]
            },
            "description": "Filter contacts by favourite status",
            "example": "true"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found contacts!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully find contacts!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "data",
                        "page",
                        "perPage",
                        "totalItems",
                        "totalPages",
                        "hasNextPage",
                        "hasPrevPage"
                      ],
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/contact"
                          }
                        },
                        "page": {
                          "type": "number",
                          "example": 2
                        },
                        "perPage": {
                          "type": "number",
                          "example": 5
                        },
                        "totalItems": {
                          "type": "number",
                          "example": 20
                        },
                        "totalPages": {
                          "type": "number",
                          "example": 4
                        },
                        "hasNextPage": {
                          "type": "boolean",
                          "example": false
                        },
                        "hasPrevPage": {
                          "type": "boolean",
                          "example": true
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad request"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Create contact",
        "operationId": "createContact",
        "description": "Create a contact with payload",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "phoneNumber",
                  "contactType"
                ],
                "properties": {
                  "name": {
                    "description": "Contact's name",
                    "type": "string",
                    "example": "Sergio"
                  },
                  "phoneNumber": {
                    "description": "Contact's phone number",
                    "type": "string",
                    "example": "+380445556677"
                  },
                  "email": {
                    "description": "Contact's email",
                    "type": "string",
                    "example": "kasnd@aalkds.com"
                  },
                  "isFavourite": {
                    "description": "Determines whether the contact has been added to favorites.",
                    "type": "boolean",
                    "example": true
                  },
                  "contactType": {
                    "description": "What type of contact does it belong to",
                    "type": "string",
                    "enum": [
                      "work",
                      "home",
                      "personal"
                    ],
                    "example": "personal"
                  },
                  "photo": {
                    "description": "Link to contact's photo",
                    "type": "string",
                    "format": "binary",
                    "example": "https://res.cloudinary.com/dd6thsdhw/image/upload/image.png"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created a contact",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201,
                      "description": "HTTP status code indicating successful creation."
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully created a contact!",
                      "description": "Confirmation message of successful contact creation."
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/contact"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/contacts/{contactId}": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Get contact by id",
        "operationId": "getContact",
        "description": "Get contact by id",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contactId",
            "required": true,
            "schema": {
              "type": "string",
              "example": "65cart65o87f10c88b598384"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get contact by id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found contact with id 65cart65o87f10c88b598384!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/contact"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/404contacts"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "put": {
        "tags": [
          "Contacts"
        ],
        "summary": "Replace contact by id",
        "operationId": "replaceContact",
        "description": "Replace the contact with the specified ID. This operation will update all fields of the contact, and any missing fields will be removed or reset to default values.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contactId",
            "required": true,
            "schema": {
              "type": "string",
              "example": "65cart65o87f10c88b598395"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "phoneNumber",
                  "email",
                  "isFavourite",
                  "contactType",
                  "userId",
                  "photo"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Kate",
                    "description": "Contact's name"
                  },
                  "phoneNumber": {
                    "type": "string",
                    "example": "+380501112233",
                    "description": "Contact's phone number"
                  },
                  "email": {
                    "type": "string",
                    "example": "popogaga@gmail.com",
                    "description": "Contact's email"
                  },
                  "isFavourite": {
                    "type": "boolean",
                    "example": true,
                    "description": "Determines whether the contact has been added to favorites."
                  },
                  "contactType": {
                    "type": "string",
                    "enum": [
                      "work",
                      "home",
                      "personal"
                    ],
                    "example": "personal",
                    "description": "What type of contact does it belong to"
                  },
                  "photo": {
                    "type": "string",
                    "description": "Link to contact's photo",
                    "format": "binary",
                    "example": "https://res.cloudinary.com/uqwgdu/image/upload/image.png"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully contact replaced",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully contact replaced with id 65ca67e7ae7f10c88b598384!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/contact"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404contacts"
          }
        }
      },
      "patch": {
        "tags": [
          "Contacts"
        ],
        "summary": "Update contact by id",
        "operationId": "updateContact",
        "description": "Update the contact with the specified ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contactId",
            "required": true,
            "schema": {
              "type": "string",
              "example": "65cart65o87f10c88b598395"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Contact's name",
                    "type": "string",
                    "example": "Kate"
                  },
                  "phoneNumber": {
                    "description": "Contact's phone number",
                    "type": "string",
                    "example": "+380501112233"
                  },
                  "email": {
                    "description": "Contact's email",
                    "type": "string",
                    "example": "popogaga@gmail.com"
                  },
                  "isFavourite": {
                    "description": "Determines whether the contact has been added to favorites.",
                    "type": "boolean",
                    "example": true
                  },
                  "contactType": {
                    "description": "What type of contact does it belong to",
                    "type": "string",
                    "enum": [
                      "work",
                      "home",
                      "personal"
                    ],
                    "example": "personal"
                  },
                  "photo": {
                    "description": "Link to contact's photo",
                    "type": "string",
                    "format": "binary",
                    "example": "https://res.cloudinary.com/uqwgdu/image/upload/image.png"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully contact updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully contact updated with id 65ca67e7ae7f10c88b598384!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/contact"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404contacts"
          }
        }
      },
      "delete": {
        "tags": [
          "Contacts"
        ],
        "summary": "Delete contact by id",
        "operationId": "deleteContact",
        "description": "Delete the contact with the specified ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contactId",
            "required": true,
            "schema": {
              "type": "string",
              "example": "65ca67e7ae7f10c88b598384"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted contact",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 204,
                      "description": "The HTTP status code indicating successful deletion with no content."
                    },
                    "message": {
                      "type": "string",
                      "example": "Contact successfully deleted.",
                      "description": "A message confirming that the contact was successfully deleted."
                    }
                  },
                  "required": [
                    "status",
                    "message"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404contacts"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Register a new User",
        "operationId": "registerUser",
        "description": "Register a new user with the provided email and password.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "New user registartion details.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "email",
                  "password"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Bloger",
                    "description": "Name of the user"
                  },
                  "email": {
                    "type": "string",
                    "example": "popogaga@gmail.com",
                    "description": "Email adress of the user"
                  },
                  "password": {
                    "type": "string",
                    "example": "password123",
                    "description": "Password of the user"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully registered a user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201,
                      "description": "HTTP status code indicating successful registration."
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully registered a new user!",
                      "description": "Confirmation message of successful registration."
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "name",
                        "email"
                      ],
                      "properties": {
                        "name": {
                          "type": "string",
                          "example": "Bloger",
                          "description": "The name of the new registered user."
                        },
                        "email": {
                          "type": "string",
                          "example": "popogaga@gmail.com",
                          "description": "The email address of the new registered user."
                        },
                        "data": {
                          "$ref": "#/components/schemas/user"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict error when the email is already in use.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 409,
                      "description": "HTTP status code indicating a conflict."
                    },
                    "message": {
                      "type": "string",
                      "example": "Email in use",
                      "description": "Description of the conflict error."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Log in a user",
        "operationId": "loginUser",
        "description": "Log in a user with the provided email and password.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "User login details.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "popogaga@gmail.com",
                    "description": "The email address of the user."
                  },
                  "password": {
                    "type": "string",
                    "example": "password123",
                    "description": "The password for the user account."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully logged in the user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200,
                      "description": "HTTP status code indicating successful login."
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully logged in a user!",
                      "description": "Confirmation message of successful login."
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "accessToken"
                      ],
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKQ66B8w87W5Y1Pfe0xgX1MP8",
                          "description": "JWT access token for authenticated requests."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401,
                      "description": "HTTP status code indicating unauthorized access."
                    },
                    "message": {
                      "type": "string",
                      "example": "Email or password invalid",
                      "description": "Unauthorized error message."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/404auth"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/refresh": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Refresh user session",
        "operationId": "refreshSession",
        "description": "Refresh the user session and recive a new access token.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully refreshed a session.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully refreshed a session!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "accessToken"
                      ],
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI2NmY4NzQ4NTkyZTcwZjg4ZTRlODk4ZjAiLCJlbWFpbCI6ImFydGVtLmZzb24xMDNAdWtyLm5ldCIsImlhdCI6MTcyODAzMzAzNywiZXhwIjoxNzI4MDMzMzM3fQ.snMULCyHu4X2YUqBRBeQRY87rGZSZaMi2ajQ5c9DxUE"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Session not found or session expired.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "enum": [
                        "Session not found",
                        "Session expired"
                      ],
                      "example": "Session not found or expired"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "enum": [
                        "Internal server error",
                        "Cannot read refreshTokenValidUntil"
                      ],
                      "example": "Internal server error or Cannot read refreshTokenValidUntil"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Log out a user",
        "operationId": "logoutUser",
        "description": "Log out a user by deleting the session and clearing the cookies.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully logged out the user."
          },
          "401": {
            "description": "Unauthorized error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401,
                      "description": "HTTP status code indicating unauthorized access."
                    },
                    "message": {
                      "type": "string",
                      "example": "Session not found",
                      "description": "Unauthorized error message."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/google-auth-url": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Get Google OAuth URL",
        "operationId": "getOAuthUrl",
        "description": "Generates URL for Google OAuth authentication.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully generated Google OAuth URL",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "googleOAuth url generate succesfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string",
                          "description": "The generated Google OAuth URL.",
                          "example": "https://accounts.google.com/o/oauth2/auth?..."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error - Missing or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401,
                      "description": "HTTP status code indicating unauthorized access."
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid or missing token",
                      "description": "Error message indicating the client did not provide valid credentials."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/confirm-google": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Authenticate user with Google OAuth",
        "operationId": "confirmGoogle",
        "description": "Handles Google OAuth authentication by validating the provided OAuth code, finding or creating a user, and setting up a session.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "The OAuth code received from Google.",
                    "example": "4/0AVG7fiS5FLspdB3VSd8v6MduRjOrQeNszdpXFg9xSLjwi93PXWuHv7a74UJka57bMixWVQ"
                  }
                },
                "required": [
                  "code"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully user login",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully login by Google OAuth"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "description": "The access token for the authenticated session.",
                          "example": "gu56bGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_u7Qssw5c"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "invalid_grant"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/send-reset-email": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Request a password reset email",
        "operationId": "sendResetEmail",
        "description": "Endpoint to request a password reset email by providing the user email. A reset token will be generated and sent to the user's email.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "The email address of the user requesting a password reset.",
                    "example": "popogaga@gmail.com"
                  }
                },
                "required": [
                  "email"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reset password email has been successfully sent.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Reset password email has been successfully sent."
                    },
                    "data": {
                      "type": "object",
                      "example": {}
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/404auth"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/reset-pwd": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Reset user password",
        "operationId": "resetPwd",
        "description": "Endpoint to reset a user's password using a reset token. The token must be valid, and a new password must be provided.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "The reset token received via email.",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI2NmY4NzQ4NTkyZTcwZjg4ZTRlODk4ZjAiLCJlbWFpbCI6ImFydGVtLmZzb24xMDNAdWtyLm5ldCIsImlhdCI6MTcyODAzMzAzNywiZXhwIjoxNzI4MDMzMzM3fQ.snMULCyHu4X2YUqBRBeQRY87rGZSZaMi2ajQ5c9DxUE"
                  },
                  "password": {
                    "type": "string",
                    "description": "The new password to send for the user.",
                    "example": "password321"
                  }
                },
                "required": [
                  "token",
                  "password"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password has been successfully reset.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Reset password successful."
                    },
                    "data": {
                      "type": "object",
                      "example": {}
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized or invalid token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid token or token expired"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/404auth"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "contact": {
        "type": "object",
        "required": [
          "name",
          "email",
          "phoneNumber",
          "contactType",
          "userId"
        ],
        "properties": {
          "_id": {
            "description": "Contact's id",
            "type": "string",
            "example": "66f2607e9519c002c713e873"
          },
          "name": {
            "description": "Contact's name",
            "type": "string",
            "example": "Ekaterina"
          },
          "phoneNumber": {
            "description": "Contact's phone number",
            "type": "string",
            "example": "+380661112233"
          },
          "email": {
            "description": "Contact's email",
            "type": "string",
            "example": "qwerty@dot.com"
          },
          "isFavourite": {
            "description": "Is contact favorite",
            "type": "boolean",
            "example": true
          },
          "contactType": {
            "description": "What type of contact does it belong to",
            "type": "string",
            "enum": [
              "work",
              "home",
              "personal"
            ],
            "example": "personal"
          },
          "userId": {
            "description": "Contact's user id",
            "type": "string",
            "example": "66f8748592e70f88e4e898f0"
          },
          "photo": {
            "description": "Link to contact's photo",
            "type": "string",
            "example": "https://res.cloudinary.com/dd6thsdhw/image/upload/image.png"
          }
        }
      },
      "user": {
        "type": "object",
        "required": [
          "name",
          "email",
          "password"
        ],
        "properties": {
          "_id": {
            "description": "Unique identifier for the user",
            "type": "string",
            "example": "60d5f3f0987654321abcdef12"
          },
          "name": {
            "description": "User's name",
            "type": "string",
            "example": "Sergio"
          },
          "email": {
            "description": "User's email address",
            "type": "string",
            "example": "kriroy@example.com"
          },
          "password": {
            "description": "User's password",
            "type": "string",
            "example": "passsword777"
          },
          "createdAt": {
            "description": "Timestamp when the user was created",
            "type": "string",
            "format": "date-time",
            "example": "2024-09-01T14:22:00Z"
          },
          "updatedAt": {
            "description": "Timestamp when the user was last updated",
            "type": "string",
            "format": "date-time",
            "example": "2024-09-01T14:22:00Z"
          }
        }
      }
    },
    "responses": {
      "400": {
        "description": "Bad request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "Bad request"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Bad request"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "Unauthorized Error"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Access token expired"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "Internal server error. This error occurs when the server encounters an unexpected condition that prevents it from fulfilling the request. It can be caused by issues such as server misconfiguration, unhandled exceptions in the application code, or problems with external services.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 500,
                  "description": "HTTP status code indicating an internal server error."
                },
                "message": {
                  "type": "string",
                  "example": "Internal server error.",
                  "description": "A generic message indicating that the server encountered an unexpected error."
                },
                "errorCode": {
                  "type": "string",
                  "example": "SERVER_ERROR",
                  "description": "A specific error code to help identify the nature of the internal issue."
                },
                "method": {
                  "type": "string",
                  "example": "POST",
                  "description": "The HTTP method used when the error occurred."
                }
              }
            }
          }
        }
      },
      "404contacts": {
        "description": "Contact not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404,
                  "description": "HTTP status code indicating that the contact was not found."
                },
                "message": {
                  "type": "string",
                  "example": "Contact with contactId not found",
                  "description": "Description of the error, specifying that the contact could not be found."
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Contact with contactId not found",
                      "description": "A message providing more details about the error."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "404auth": {
        "description": "User not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "User not found!",
                  "description": "Description of the error, specifying that the user could not be found. This typically occurs when the provided user ID does not exist in the system or the user has been deleted."
                },
                "errorCode": {
                  "type": "string",
                  "example": "USER_NOT_FOUND"
                }
              }
            }
          }
        }
      }
    }
  }
}